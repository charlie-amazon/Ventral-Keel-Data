labs(color="Family") +
theme_classic()
require(tidyverse)
k.data <- read.csv("Keel_Measurements.csv")
k.plot <- ggplot(data = k.data) +
geom_point(mapping = aes(x = standard_length, y = keel_length, color = family), size = 3)+
geom_line(stat = "smooth", method = "lm", mapping = aes(x = standard_length, y = keel_length), linewidth = 0.6, linetype = "dashed", alpha = 0.8)+
geom_abline(aes(slope = 0.5, intercept = 0), )
labs(x = "Standard Length (mm)")+
labs(y = "Keel Length (mm)")+
labs(color="Family") +
theme_classic()
k.plot <- ggplot(data = k.data) +
geom_point(mapping = aes(x = standard_length, y = keel_length, color = family), size = 3)+
geom_line(stat = "smooth", method = "lm", mapping = aes(x = standard_length, y = keel_length), linewidth = 0.6, linetype = "dashed", alpha = 0.8)+
geom_abline(aes(slope = 0.5, intercept = 0), )+
labs(x = "Standard Length (mm)")+
labs(y = "Keel Length (mm)")+
labs(color="Family") +
theme_classic()
k.plot
k.plot <- ggplot(data = k.data) +
geom_point(mapping = aes(x = standard_length, y = keel_length, color = family), size = 3)+
geom_line(stat = "smooth", method = "lm", mapping = aes(x = standard_length, y = keel_length), linewidth = 0.6, linetype = "dashed", alpha = 0.8)+
geom_abline(aes(slope = 0.6, intercept = 0), )+
labs(x = "Standard Length (mm)")+
labs(y = "Keel Length (mm)")+
labs(color="Family") +
theme_classic()
k.plot
hist(k.data$ratio)
# Basic histogram
ggplot(k.data, aes(x=ratio)) + geom_histogram()
# Change the width of bins
ggplot(k.data, aes(x=ratio)) +
geom_histogram(binwidth=1)
# Change the width of bins
ggplot(k.data, aes(x=ratio)) +
geom_histogram(binwidth=.1)
# Change colors
p<-ggplot(k.data, aes(x=ratio)) +
geom_histogram(color="black", fill="white")
p
# Change the width of bins
ggplot(k.data, aes(x=ratio)) +
geom_histogram(binwidth=.05)
# Basic histogram
ggplot(k.data, aes(x=ratio)) + geom_histogram()
# Change the width of bins
ggplot(k.data, aes(x=ratio)) +
geom_histogram(binwidth=.07)
# Change the width of bins
ggplot(k.data, aes(x=ratio)) +
geom_histogram(binwidth=.06)
# Histogram with density plot
ggplot(k.data, aes(x=ratio)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
# Histogram with density plot
ggplot(k.data, aes(x=ratio)) +
geom_histogram(aes(binwidth=.06, y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
# Histogram with density plot
ggplot(k.data, aes(x=ratio)) +
geom_histogram(binwidth=.06, aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
# Histogram with density plot
ggplot(k.data, aes(x=ratio)) +
geom_histogram(binwidth=.05, aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
# Histogram with density plot
ggplot(k.data, aes(x=ratio)) +
geom_histogram(binwidth=.04, aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
# Change the width of bins
ggplot(k.data, aes(x=ratio)) +
geom_histogram(binwidth=.06)
# Change the width of bins
ggplot(k.data, aes(x=ratio)) +
geom_histogram(binwidth=.04)
# Change the width of bins
ggplot(k.data, aes(x=ratio)) +
geom_histogram(binwidth=.01)
# Change the width of bins
ggplot(k.data, aes(x=ratio)) +
geom_histogram(binwidth=.02)
# Change the width of bins
ggplot(k.data, aes(x=ratio)) +
geom_histogram(binwidth=.03)
# Change the width of bins
ggplot(k.data, aes(x=ratio)) +
geom_histogram(binwidth=.04)
# Change the width of bins
ggplot(k.data, aes(x=ratio)) +
geom_histogram(binwidth=.1)
# Change the width of bins
ggplot(k.data, aes(x=ratio)) +
geom_histogram(binwidth=.7)
# Change the width of bins
ggplot(k.data, aes(x=ratio)) +
geom_histogram(binwidth=.05)
# Histogram with density plot
ggplot(k.data, aes(x=ratio)) +
geom_histogram(binwidth=.05, aes(y=..density..), colour="black", fill="white")+
# Histogram with density plot
ggplot(k.data, aes(x=ratio)) +
geom_histogram(binwidth=.05, aes(y=..density..), colour="black", fill="white")+
# Histogram with density plot
ggplot(k.data, aes(x=ratio)) +
geom_histogram(binwidth=.05, aes(y=..density..), colour="black", fill="white")
# Histogram with density plot
ggplot(k.data, aes(x=ratio)) +
geom_histogram(binwidth=.05, aes(y=..density..), colour="black", fill="white")
# Histogram with density plot
ggplot(k.data, aes(x=ratio)) +
geom_histogram(binwidth=.06, aes(y=..density..), colour="black", fill="white")
line.plot <- ggplot(data = k.data) +
geom_point(mapping = aes(x = standard_length, y = keel_length, color = family), size = 3)+
geom_line(stat = "smooth", method = "lm", mapping = aes(x = standard_length, y = keel_length), linewidth = 0.6, linetype = "dashed", alpha = 0.8)+
labs(x = "Standard Length (mm)")+
labs(y = "Keel Length (mm)")+
labs(color="Family") +
theme_classic()
line.plot
View(k.data)
lm(keel_lentgh ~ standard_length, data = k.data)
lm(keel_length ~ standard_length, data = k.data)
lmkeel <- lm(keel_length ~ standard_length, data = k.data)
summary(lmkeel)
library(tidyr)
library(ggplot2)
library(patchwork)
library(ggplot2)
library(pracma)
library(dplyr)
data02 <- read.csv("Flume_Forces_Sum_rotated.csv")
data02$model <- as.factor(paste(data02$Body, data02$Keel))
data02$Frequency <- as.numeric(data02$Frequency)
dataSubset <- data02[1:161,]
dataSubset$model <- factor(dataSubset$model, levels = c("E no", "E 40", "E 60",
"M no", "M 40", "M 60",
"D no", "D 40", "D 60"))
colors = c("palegreen", "green3", "darkgreen",
"lightblue1", "dodgerblue", "dodgerblue4",
"burlywood1", "orange", "darkorange4")
thirty <- filter(dataSubset, Speed == "30")
twenty <- filter(dataSubset, Speed == "20")
ten <- filter(dataSubset, Speed == "10")
ggplot(thirty, aes(x = Frequency, y = Fy, color = model))+
geom_point()+
geom_smooth(method = "lm", se = FALSE)+
scale_color_manual(values=colors)+
theme_classic()+
xlab("Model")+
ylab("Thrust (N)")
ggplot(thirty, aes(y = Fy, fill = model))+
geom_boxplot()+
scale_fill_manual(values=colors)+
theme_classic()+
xlab("Model")+
ylab("Thrust (N)")
ggplot(thirty, aes(y = Mx, fill = model))+
geom_boxplot()+
scale_fill_manual(values=colors)+
theme_classic()+
xlab("Model")+
ylab("X Torque (Nm)")
#Frequency plot for 30m/s
ggplot(thirty, aes(x = Frequency, y = Fy, color = model))+
geom_point()+
geom_smooth(method = "lm", se = FALSE)+
scale_color_manual(values=colors)+
theme_classic()+
xlab("Model")+
ylab("Thrust (N)")
#Thrust plot for 30m/s
ggplot(thirty, aes(y = Fy, fill = model))+
geom_boxplot()+
scale_fill_manual(values=colors)+
theme_classic()+
xlab("Model")+
ylab("Thrust (N)")
#Torque plot for 30m/s
ggplot(thirty, aes(y = Mx, fill = model))+
geom_boxplot()+
scale_fill_manual(values=colors)+
theme_classic()+
xlab("Model")+
ylab("X Torque (Nm)")
#Frequency plot for 20m/s
ggplot(twenty, aes(x = Frequency, y = Fy, color = model))+
geom_point()+
geom_smooth(method = "lm", se = FALSE)+
scale_color_manual(values=colors)+
theme_classic()+
xlab("Model")+
ylab("Thrust (N)")
#Thrust plot for 20m/s
ggplot(twenty, aes(y = Fy, fill = model))+
geom_boxplot()+
scale_fill_manual(values=colors)+
theme_classic()+
xlab("Model")+
ylab("Thrust (N)")
#Torque plot for 20m/s
ggplot(twenty, aes(y = Mx, fill = model))+
geom_boxplot()+
scale_fill_manual(values=colors)+
theme_classic()+
xlab("Model")+
ylab("X Torque (Nm)")
#Frequency plot for 10m/s
ggplot(ten, aes(x = Frequency, y = Fy, color = model))+
geom_point()+
geom_smooth(method = "lm", se = FALSE)+
scale_color_manual(values=colors)+
theme_classic()+
xlab("Model")+
ylab("Thrust (N)")
#Thrust plot for 10m/s
ggplot(ten, aes(y = Fy, fill = model))+
geom_boxplot()+
scale_fill_manual(values=colors)+
theme_classic()+
xlab("Model")+
ylab("Thrust (N)")
#Torque plot for 10m/s
ggplot(ten, aes(y = Mx, fill = model))+
geom_boxplot()+
scale_fill_manual(values=colors)+
theme_classic()+
xlab("Model")+
ylab("X Torque (Nm)")
#Frequency plot for 30m/s
ggplot(thirty, aes(x = Frequency, y = Fy, color = model))+
geom_point()+
geom_smooth(method = "lm", se = FALSE)+
scale_color_manual(values=colors)+
theme_classic()+
xlab("Frequency")+
ylab("Thrust (N)")
View(thirty)
#Frequency plot for 20m/s
ggplot(twenty, aes(x = Frequency, y = Fy, color = model))+
geom_point()+
geom_smooth(method = "lm", se = FALSE)+
scale_color_manual(values=colors)+
theme_classic()+
xlab("Frequency")+
ylab("Thrust (N)")
#Frequency plot for 10m/s
ggplot(ten, aes(x = Frequency, y = Fy, color = model))+
geom_point()+
geom_smooth(method = "lm", se = FALSE)+
scale_color_manual(values=colors)+
theme_classic()+
xlab("Frequency")+
ylab("Thrust (N)")
#Frequency plot for 10m/s
ggplot(ten, aes(x = Frequency, y = Fy, color = model))+
geom_histogram()
#Frequency plot for 10m/s
ggplot(ten, aes(x = model, color = model))+
geom_histogram()
#Thrust plot for 10m/s
ggplot(ten, aes(y = Fy, fill = model))+
geom_boxplot()+
scale_fill_manual(values=colors)+
theme_classic()+
xlab("Model")+
ylab("Thrust (N)")
#Torque plot for 10m/s
ggplot(ten, aes(y = Mx, fill = model))+
geom_violin()+
scale_fill_manual(values=colors)+
theme_classic()+
xlab("Model")+
ylab("X Torque (Nm)")
#Torque plot for 10m/s
ggplot(ten, aes(y = Mx, x = model))+
geom_violin()+
scale_fill_manual(values=colors)+
theme_classic()+
xlab("Model")+
ylab("X Torque (Nm)")
#Torque plot for 10m/s
ggplot(ten, aes(y = Mx, fill = model))+
geom_boxplot()+
scale_fill_manual(values=colors)+
theme_classic()+
xlab("Model")+
ylab("X Torque (Nm)")
library(tidyr)
library(ggplot2)
library(patchwork)
library(ggplot2)
library(pracma)
library(dplyr)
data02 <- read.csv("Flume_Forces_Sum_rotated.csv")
data02$model <- as.factor(paste(data02$Body, data02$Keel))
data02$Frequency <- as.numeric(data02$Frequency)
dataSubset <- data02[1:161,]
dataSubset$model <- factor(dataSubset$model, levels = c("E no", "E 40", "E 60",
"M no", "M 40", "M 60",
"D no", "D 40", "D 60"))
colors = c("palegreen", "green3", "darkgreen",
"lightblue1", "dodgerblue", "dodgerblue4",
"burlywood1", "orange", "darkorange4")
thirty <- filter(dataSubset, Speed == "30")
twenty <- filter(dataSubset, Speed == "20")
ten <- filter(dataSubset, Speed == "10")
View(thirty)
View(twenty)
#Torque Frequency plot for 30m/s
ggplot(thirty, aes(x = Frequency, y = Mx, color = model))+
geom_point()+
geom_smooth(method = "lm", se = FALSE)+
scale_color_manual(values=colors)+
theme_classic()+
xlab("Frequency")+
ylab("X Torque (Nm)")
#Torque Frequency plot for 20m/s
ggplot(twenty, aes(x = Frequency, y = Mx, color = model))+
geom_point()+
geom_smooth(method = "lm", se = FALSE)+
scale_color_manual(values=colors)+
theme_classic()+
xlab("Frequency")+
ylab("X Torque (Nm)")
#Torque Frequency plot for 10m/s
ggplot(ten, aes(x = Frequency, y = Mx, color = model))+
geom_point()+
geom_smooth(method = "lm", se = FALSE)+
scale_color_manual(values=colors)+
theme_classic()+
xlab("Frequency")+
ylab("X Torque (Nm)")
#Torque Frequency plot for 30m/s
ggplot(thirty, aes(x = Frequency, y = Mx, color = model))+
geom_point()+
geom_smooth(method = "lm", se = FALSE)+
scale_color_manual(values=colors)+
theme_classic()+
xlab("Frequency")+
ylab("X Torque (Nm)")
#Torque Frequency plot for 20m/s
ggplot(twenty, aes(x = Frequency, y = Mx, color = model))+
geom_point()+
geom_smooth(method = "lm", se = FALSE)+
scale_color_manual(values=colors)+
theme_classic()+
xlab("Frequency")+
ylab("X Torque (Nm)")
#Torque Frequency plot for 10m/s
ggplot(ten, aes(x = Frequency, y = Mx, color = model))+
geom_point()+
geom_smooth(method = "lm", se = FALSE)+
scale_color_manual(values=colors)+
theme_classic()+
xlab("Frequency")+
ylab("X Torque (Nm)")
library(tidyr)
library(ggplot2)
library(patchwork)
library(ggplot2)
library(pracma)
library(dplyr)
data02 <- read.csv("Flume_Forces_Sum_rotated.csv")
data02$model <- as.factor(paste(data02$Body, data02$Keel))
data02$Frequency <- as.numeric(data02$Frequency)
dataSubset <- data02[1:161,]
dataSubset$model <- factor(dataSubset$model, levels = c("E no", "E 40", "E 60",
"M no", "M 40", "M 60",
"D no", "D 40", "D 60"))
colors = c("palegreen", "green3", "darkgreen",
"lightblue1", "dodgerblue", "dodgerblue4",
"burlywood1", "orange", "darkorange4")
View(dataSubset)
View(dataSubset)
stats_data <- filter(dataSubset, Speed == "30" | Speed == '10')
View(stats_data)
View(stats_data)
write.csv(stats_data, "C:\Users\charl\Documents\R\stats_data.csv")
write.csv(stats_data, "C:/Use/charl/Documents/R/stats_data.csv")
write.csv(stats_data,"C:/Downloads/statsDATA.csv", row.names = FALSE)
write.csv(stats_data,"C:\Downloads\statsDATA.csv", row.names = FALSE)
df.csv(total, my_documents_path, row.names = FALSE)
my_documents_path <- file.path(Sys.getenv("USERPROFILE"), "Documents", "df.csv")
df.csv(stats_data, my_documents_path, row.names = FALSE)
stats_data(total, my_documents_path, row.names = FALSE)
write.csv(stats_data, "stats_data.csv")
setwd("~/R")
library(tidyr)
library(ggplot2)
library(patchwork)
library(ggplot2)
library(pracma)
library(dplyr)
knitr::opts_chunk$set(error = TRUE)
library(MASS)
load(crabs)
load('crabs')
crabs.f.o <- crabs[crabs$sex == 'F' & crabs$sp == 'O',]
View(crabs.f.o)
library(tidyr)
library(ggplot2)
library(patchwork)
library(ggplot2)
library(pracma)
library(dplyr)
colMax <- function(data) sapply(data, max, na.rm=TRUE)
setwd("~/Fish Stuff/Flume Data")
path <- "Flume Data" # path to the folder with all of the txt files
##Get all the arm position files
armFiles <- list.files(path = ".", pattern = "*arm.csv", all.files = FALSE, full.names = FALSE,
recursive = TRUE, ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
## Get all the force files
forceFiles <- list.files(path = ".", pattern = "*FT.csv", all.files = FALSE, full.names = FALSE,
recursive = TRUE, ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
#concat all data
data02 <- data.frame()
for (i in 1:length(forceFiles)) {
fileName = forceFiles[i]  # get the file name of the i-th force file
tmp_data = as.data.frame(read.csv(forceFiles[i]))  # read in the i-th force file
armData = as.data.frame(read.csv(armFiles[i]))     # read in the i-th arm file
tmp_data=tmp_data[- 1, ]  # remove the first row (noise)
name <- stringr::str_split(fileName,"_")[[1]]  # break up file name by underscores
freq = as.numeric(name[4])  # convert frequency into a number
# create a time matrix based on the min and max time
x = linspace(min(armData$t), max(armData$t), length(tmp_data$t))
# create a matrix based on set frequency to calculate angle
y = 20*sin(2*pi*-freq*x)
# convert to radians
yRad = y*pi/180
# Rotate Fx and Fy based on arm position
tmp_data$Fx = tmp_data$Fx*cos(yRad) + tmp_data$Fy*sin(yRad)
tmp_data$Fy = tmp_data$Fx*sin(yRad) + tmp_data$Fy*cos(yRad)
# Take the mean of all the columns and convert to data frame
### This is where we would calculate other things ###
tmp_data = as.data.frame(colMax(tmp_data[2:7]))
tmp_data = as.data.frame(t(tmp_data))
# use file name to get meta data
tmp_data$Body <- name[1]
tmp_data$Keel <- name[2]
tmp_data$Frequency <- name[4]
tmp_data$Speed <- name[8]
# tmp_data <- tmp_data[c(8:10,1:7)]
# tmp_data[, c(2:10)] <- sapply(tmp_data[, c(2:10)], as.numeric)
data02 <- rbind(data02,tmp_data) # add row to concatenaetd data
# colnames(data) <- c("Model","Angle","Speed","t","Fx","Fy","Fz",
#                     "Filtered.x","Filtered.y","Filtered.z")
print(fileName) # tell us where we are
}
data02$model <- as.factor(paste(data02$Body, data02$Keel))
data02$Frequency <- as.numeric(data02$Frequency)
write.csv(data02, "Flume_Forces_Max_rotated.csv", row.names = F)
#concat all data
data02 <- data.frame()
for (i in 1:length(forceFiles)) {
fileName = forceFiles[i]  # get the file name of the i-th force file
tmp_data = as.data.frame(read.csv(forceFiles[i]))  # read in the i-th force file
armData = as.data.frame(read.csv(armFiles[i]))     # read in the i-th arm file
tmp_data=tmp_data[- 1, ]  # remove the first row (noise)
name <- stringr::str_split(fileName,"_")[[1]]  # break up file name by underscores
freq = as.numeric(name[4])  # convert frequency into a number
# create a time matrix based on the min and max time
x = linspace(min(armData$t), max(armData$t), length(tmp_data$t))
# create a matrix based on set frequency to calculate angle
y = 20*sin(2*pi*-freq*x)
# convert to radians
yRad = y*pi/180
# Rotate Fx and Fy based on arm position
tmp_data$Fx = tmp_data$Fx*cos(yRad) + tmp_data$Fy*sin(yRad)
tmp_data$Fy = tmp_data$Fx*sin(yRad) + tmp_data$Fy*cos(yRad)
# Take the mean of all the columns and convert to data frame
### This is where we would calculate other things ###
#tmp_data = as.data.frame(colMax(tmp_data[2:7]))
#tmp_data = as.data.frame(t(tmp_data))
# use file name to get meta data
tmp_data$Body <- name[1]
tmp_data$Keel <- name[2]
tmp_data$Frequency <- name[4]
tmp_data$Speed <- name[8]
# tmp_data <- tmp_data[c(8:10,1:7)]
# tmp_data[, c(2:10)] <- sapply(tmp_data[, c(2:10)], as.numeric)
data02 <- rbind(data02,tmp_data) # add row to concatenaetd data
# colnames(data) <- c("Model","Angle","Speed","t","Fx","Fy","Fz",
#                     "Filtered.x","Filtered.y","Filtered.z")
print(fileName) # tell us where we are
}
data02$model <- as.factor(paste(data02$Body, data02$Keel))
data02$Frequency <- as.numeric(data02$Frequency)
View(data02)
M40.10.0.5 <- data02[data02$model == 'M40' & data02$Speed == 10 & data02$Frequency == 0.5]
View(M40.10.0.5)
M40.10.0.5 <- data02[data02$model == 'M40' & data02$Speed == 10 & data02$Frequency == 0.5,]
View(M40.10.0.5)
M40.10.0.5 <- data02[data02$model == 'M40' & data02$Speed == '10' & data02$Frequency == '0.5',]
View(M40.10.0.5)
M40.10.0.5 <- data02[data02$model == 'D40' & data02$Speed == '10' & data02$Frequency == '0.5',]
M40.10.0.5 <- data02[data02$model == 'D40' & data02$Speed == 10 & data02$Frequency == 0.5,]
class(data02$Frequency)
class(data02$Speed)
M40.10.0.5 <- data02[data02$model == 'D40' & data02$Speed == '10' & data02$Frequency == 0.5,]
class(data02$model)
D40.10.0.5 <- data02[data02$Speed == '10' & data02$Frequency == 0.5,]
D40.10.0.5 <- data02[data02$model == D40 & data02$Speed == '10' & data02$Frequency == 0.5,]
View(D40.10.0.5)
D40.10.0.5 <- data02[data02$model == D 40 & data02$Speed == '10' & data02$Frequency == 0.5,]
D40.10.0.5 <- data02[data02$model == 'D 40' & data02$Speed == '10' & data02$Frequency == 0.5,]
View(D40.10.0.5)
max(D40.10.0.5$Fx)
